{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1463647190000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1463647190000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1463647190000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1463647190000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1463647190000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1463647190000},{"_id":"source/_posts/ReactiveCocoa实践（一）.md","hash":"f62c4fcf15112d77fa5fbdeb4ed025e67c704c0b","modified":1460444724000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1463649872000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1463647190000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1463647190000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1463647190000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1463647190000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1463647190000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1463647190000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1463647190000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1463647190000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1463647190000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1463647190000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1463647190000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1463647190000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1463647190000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1463647190000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1463647190000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1463647190000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1463647190000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1463647190000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1463647190000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1463647190000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463647190000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1463647190000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1463647190000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1463647190000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1463647190000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1463647190000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1463647190000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1463647190000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1463647190000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1463647190000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1463647190000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1463647190000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1463647190000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1463647190000},{"_id":"public/2016/04/12/ReactiveCocoa实践（一）/index.html","hash":"d99aaa55f029e1e875682b3145c349d259d2b2f4","modified":1463650043347},{"_id":"public/archives/index.html","hash":"ed9b1cb2b6a7cbdb646ccb2813b68c657e5b1f11","modified":1463650043347},{"_id":"public/archives/2016/index.html","hash":"60efd0fb7557c2b7b1ba3ce0bf6d2fa60ddfe6b9","modified":1463650043348},{"_id":"public/archives/2016/04/index.html","hash":"dd1dd865d54890f0f2258bbe7c6e7ba229d99423","modified":1463650043348},{"_id":"public/categories/iOS/index.html","hash":"02138a296b0894eeb201e7129b60a4d061f227fa","modified":1463650043348},{"_id":"public/tags/iOS/index.html","hash":"493857f447dedfb074a4541db678746390a22447","modified":1463650043348},{"_id":"public/tags/ReactiveCocoa/index.html","hash":"2032cff5004472c1998ae6662fab12de1a7d66f3","modified":1463650043348},{"_id":"public/index.html","hash":"9cf1312d4f0e804a7111e1b0ce7699e7cb13c11d","modified":1463650043349}],"Category":[{"name":"iOS","_id":"cioe3dezd0002o2srggbriq2o"}],"Data":[],"Page":[],"Post":[{"title":"ReactiveCocoa实践（一）","date":"2016-04-12T03:57:32.000Z","author":"zhungxd","_content":"\nReactiveCocoa(以下简称RAC)是iOS上函数响应式编程（Functional Reactive Programming，FRP）的框架，这个和我们平时面向对象（OOP）的编程方式有挺大的区别。本文通过在项目中使用RAC来实现一个小功能，让大家了解一下RAC。\n# Introduction\n有一个需求，在搜索页搜索时，需要先判断输入内容是否合法（2个字符以上），同时需要500毫秒的延迟，减少用户输入过程中频繁发起请求。这个功能非常适合用RAC来实现。FRP的核心是信号（signal），而输入框文本变化实质是一种信号，我们可以通过对信号的处理来完成这个功能。\n# Signal\nRAC中最核心的类RACSignal，是一系列可以被监测的数据流。\n\n* 信号类(RACSignal)，只是表示当数据改变时，信号内部会发出数据.\n* 默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。\n* 如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。\n\n一个简单例子:\n\n{% codeblock \"RACSignal\" lang:objectivec %}\n  RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {\n    // block调用时刻：每当有订阅者订阅信号，就会调用block。\n    // 发送信号\n    [subscriber sendNext:@1];\n    // 发送完成信号\n    [subscriber sendCompleted];\n    return nil;\n  }];\n  \n  // 订阅信号,才会激活信号.\n  [signal subscribeNext:^(id x) {\n    // block调用时刻：每当有信号发出数据，就会调用block.\n    NSLog(@\"接收到数据:%@\",x);\n  }];\n{% endcodeblock %}\n同时也支持使用宏来快速地生成信号\n\n{% codeblock \"KVO\" lang:objectivec %}\n  [RACObserve(self, searchText) subscribeNext:^(NSString *text) {\n    NSLog(@\"%@\", text);\n  }];\n{% endcodeblock %}\n`RACObserve`通过`- (RACSignal *)rac_valuesForKeyPath: observer:`来生成了一个信号，\n其使用了KVO来监听property的变化，只要searchText被自己或外部改变，block就会被执行。只要是支持KVO的property都可以被RACObserve来生成一个信号。\n## Operators\n信号的处理是非常方便的，可以被修改(map)，也可以被过滤（filter），还可以被节流(throttle,一段时间内不在发送新的信号)等等。\n\n{% codeblock \"Operators\" lang:objectivec %}\n  [[[RACObserve(self, searchText)\n     filter:^BOOL(NSString *text) {\n       return text.length > 2;\n     }]\n    throttle:0.5]\n   subscribeNext:^(NSString *searchText) {\n     [self search:searchText];\n   }];\n{% endcodeblock %}\n以上的代码通过对原始信号的处理（filter,throttle），生成了一下新的信号，过滤了输入字符长度小于等于2，同时在一定500毫秒内，不接收任何信号内容，过了500毫秒才获取最后发送的信号内容发出。\n# Implementation\n当然由于block的循环引用，我们必须像往常一样使用weakSelf，strongSelf。RAC在RACEXTScope.h中定义了 `@weakify()` 和 `@strongify()` 来方便我们使用。`@weakify()`实际上定义了一个_weak的`self_weak_` 变量\u0010，而`@strongify()`则在block定义了一个指向`self_weak_`的_strong的self指针。最终代码：\n\n{% codeblock \"Final Code\" lang:objectivec %}\n  @weakify(self);\n  [[[RACObserve(self, searchText)\n     filter:^BOOL(NSString *text) {\n       return text.length > 2;\n     }]\n    throttle:0.5]\n   subscribeNext:^(NSString *searchText) {\n     @strongify(self);\n     [self search:searchText];\n   }]\n{% endcodeblock %}\n\n-------------\n\nWritten by 饿了么iOS组 － [zhungxd](https://github.com/zhungxd)","source":"_posts/ReactiveCocoa实践（一）.md","raw":"title: ReactiveCocoa实践（一）\ndate: 2016-04-12 11:57:32\nauthor: zhungxd\ntags:\n- iOS\n- ReactiveCocoa\ncategory: iOS\n---\n\nReactiveCocoa(以下简称RAC)是iOS上函数响应式编程（Functional Reactive Programming，FRP）的框架，这个和我们平时面向对象（OOP）的编程方式有挺大的区别。本文通过在项目中使用RAC来实现一个小功能，让大家了解一下RAC。\n# Introduction\n有一个需求，在搜索页搜索时，需要先判断输入内容是否合法（2个字符以上），同时需要500毫秒的延迟，减少用户输入过程中频繁发起请求。这个功能非常适合用RAC来实现。FRP的核心是信号（signal），而输入框文本变化实质是一种信号，我们可以通过对信号的处理来完成这个功能。\n# Signal\nRAC中最核心的类RACSignal，是一系列可以被监测的数据流。\n\n* 信号类(RACSignal)，只是表示当数据改变时，信号内部会发出数据.\n* 默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。\n* 如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。\n\n一个简单例子:\n\n{% codeblock \"RACSignal\" lang:objectivec %}\n  RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {\n    // block调用时刻：每当有订阅者订阅信号，就会调用block。\n    // 发送信号\n    [subscriber sendNext:@1];\n    // 发送完成信号\n    [subscriber sendCompleted];\n    return nil;\n  }];\n  \n  // 订阅信号,才会激活信号.\n  [signal subscribeNext:^(id x) {\n    // block调用时刻：每当有信号发出数据，就会调用block.\n    NSLog(@\"接收到数据:%@\",x);\n  }];\n{% endcodeblock %}\n同时也支持使用宏来快速地生成信号\n\n{% codeblock \"KVO\" lang:objectivec %}\n  [RACObserve(self, searchText) subscribeNext:^(NSString *text) {\n    NSLog(@\"%@\", text);\n  }];\n{% endcodeblock %}\n`RACObserve`通过`- (RACSignal *)rac_valuesForKeyPath: observer:`来生成了一个信号，\n其使用了KVO来监听property的变化，只要searchText被自己或外部改变，block就会被执行。只要是支持KVO的property都可以被RACObserve来生成一个信号。\n## Operators\n信号的处理是非常方便的，可以被修改(map)，也可以被过滤（filter），还可以被节流(throttle,一段时间内不在发送新的信号)等等。\n\n{% codeblock \"Operators\" lang:objectivec %}\n  [[[RACObserve(self, searchText)\n     filter:^BOOL(NSString *text) {\n       return text.length > 2;\n     }]\n    throttle:0.5]\n   subscribeNext:^(NSString *searchText) {\n     [self search:searchText];\n   }];\n{% endcodeblock %}\n以上的代码通过对原始信号的处理（filter,throttle），生成了一下新的信号，过滤了输入字符长度小于等于2，同时在一定500毫秒内，不接收任何信号内容，过了500毫秒才获取最后发送的信号内容发出。\n# Implementation\n当然由于block的循环引用，我们必须像往常一样使用weakSelf，strongSelf。RAC在RACEXTScope.h中定义了 `@weakify()` 和 `@strongify()` 来方便我们使用。`@weakify()`实际上定义了一个_weak的`self_weak_` 变量\u0010，而`@strongify()`则在block定义了一个指向`self_weak_`的_strong的self指针。最终代码：\n\n{% codeblock \"Final Code\" lang:objectivec %}\n  @weakify(self);\n  [[[RACObserve(self, searchText)\n     filter:^BOOL(NSString *text) {\n       return text.length > 2;\n     }]\n    throttle:0.5]\n   subscribeNext:^(NSString *searchText) {\n     @strongify(self);\n     [self search:searchText];\n   }]\n{% endcodeblock %}\n\n-------------\n\nWritten by 饿了么iOS组 － [zhungxd](https://github.com/zhungxd)","slug":"ReactiveCocoa实践（一）","published":1,"updated":"2016-04-12T07:05:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioe3dez10000o2srd4xxeut1","content":"<p>ReactiveCocoa(以下简称RAC)是iOS上函数响应式编程（Functional Reactive Programming，FRP）的框架，这个和我们平时面向对象（OOP）的编程方式有挺大的区别。本文通过在项目中使用RAC来实现一个小功能，让大家了解一下RAC。</p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>有一个需求，在搜索页搜索时，需要先判断输入内容是否合法（2个字符以上），同时需要500毫秒的延迟，减少用户输入过程中频繁发起请求。这个功能非常适合用RAC来实现。FRP的核心是信号（signal），而输入框文本变化实质是一种信号，我们可以通过对信号的处理来完成这个功能。</p>\n<h1 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h1><p>RAC中最核心的类RACSignal，是一系列可以被监测的数据流。</p>\n<ul>\n<li>信号类(RACSignal)，只是表示当数据改变时，信号内部会发出数据.</li>\n<li>默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。</li>\n<li>如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。</li>\n</ul>\n<p>一个简单例子:</p>\n<figure class=\"highlight objectivec\"><figcaption><span>RACSignal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class=\"keyword\">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// block调用时刻：每当有订阅者订阅信号，就会调用block。</span></span><br><span class=\"line\">  <span class=\"comment\">// 发送信号</span></span><br><span class=\"line\">  [subscriber sendNext:@<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 发送完成信号</span></span><br><span class=\"line\">  [subscriber sendCompleted];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅信号,才会激活信号.</span></span><br><span class=\"line\">[signal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// block调用时刻：每当有信号发出数据，就会调用block.</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"接收到数据:%@\"</span>,x);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>同时也支持使用宏来快速地生成信号</p>\n<figure class=\"highlight objectivec\"><figcaption><span>KVO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[RACObserve(<span class=\"keyword\">self</span>, searchText) subscribeNext:^(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, text);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p><code>RACObserve</code>通过<code>- (RACSignal *)rac_valuesForKeyPath: observer:</code>来生成了一个信号，<br>其使用了KVO来监听property的变化，只要searchText被自己或外部改变，block就会被执行。只要是支持KVO的property都可以被RACObserve来生成一个信号。</p>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p>信号的处理是非常方便的，可以被修改(map)，也可以被过滤（filter），还可以被节流(throttle,一段时间内不在发送新的信号)等等。</p>\n<figure class=\"highlight objectivec\"><figcaption><span>Operators</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[RACObserve(<span class=\"keyword\">self</span>, searchText)</span><br><span class=\"line\">   filter:^<span class=\"built_in\">BOOL</span>(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">  throttle:<span class=\"number\">0.5</span>]</span><br><span class=\"line\"> subscribeNext:^(<span class=\"built_in\">NSString</span> *searchText) &#123;</span><br><span class=\"line\">   [<span class=\"keyword\">self</span> search:searchText];</span><br><span class=\"line\"> &#125;];</span><br></pre></td></tr></table></figure>\n<p>以上的代码通过对原始信号的处理（filter,throttle），生成了一下新的信号，过滤了输入字符长度小于等于2，同时在一定500毫秒内，不接收任何信号内容，过了500毫秒才获取最后发送的信号内容发出。</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>当然由于block的循环引用，我们必须像往常一样使用weakSelf，strongSelf。RAC在RACEXTScope.h中定义了 <code>@weakify()</code> 和 <code>@strongify()</code> 来方便我们使用。<code>@weakify()</code>实际上定义了一个_weak的<code>self_weak_</code> 变量\u0010，而<code>@strongify()</code>则在block定义了一个指向<code>self_weak_</code>的_strong的self指针。最终代码：</p>\n<figure class=\"highlight objectivec\"><figcaption><span>Final Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[[[RACObserve(<span class=\"keyword\">self</span>, searchText)</span><br><span class=\"line\">   filter:^<span class=\"built_in\">BOOL</span>(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">  throttle:<span class=\"number\">0.5</span>]</span><br><span class=\"line\"> subscribeNext:^(<span class=\"built_in\">NSString</span> *searchText) &#123;</span><br><span class=\"line\">   @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">   [<span class=\"keyword\">self</span> search:searchText];</span><br><span class=\"line\"> &#125;]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Written by 饿了么iOS组 － <a href=\"https://github.com/zhungxd\" target=\"_blank\" rel=\"external\">zhungxd</a></p>\n","excerpt":"","more":"<p>ReactiveCocoa(以下简称RAC)是iOS上函数响应式编程（Functional Reactive Programming，FRP）的框架，这个和我们平时面向对象（OOP）的编程方式有挺大的区别。本文通过在项目中使用RAC来实现一个小功能，让大家了解一下RAC。</p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>有一个需求，在搜索页搜索时，需要先判断输入内容是否合法（2个字符以上），同时需要500毫秒的延迟，减少用户输入过程中频繁发起请求。这个功能非常适合用RAC来实现。FRP的核心是信号（signal），而输入框文本变化实质是一种信号，我们可以通过对信号的处理来完成这个功能。</p>\n<h1 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h1><p>RAC中最核心的类RACSignal，是一系列可以被监测的数据流。</p>\n<ul>\n<li>信号类(RACSignal)，只是表示当数据改变时，信号内部会发出数据.</li>\n<li>默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。</li>\n<li>如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。</li>\n</ul>\n<p>一个简单例子:</p>\n<figure class=\"highlight objectivec\"><figcaption><span>RACSignal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class=\"keyword\">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// block调用时刻：每当有订阅者订阅信号，就会调用block。</span></span><br><span class=\"line\">  <span class=\"comment\">// 发送信号</span></span><br><span class=\"line\">  [subscriber sendNext:@<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 发送完成信号</span></span><br><span class=\"line\">  [subscriber sendCompleted];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅信号,才会激活信号.</span></span><br><span class=\"line\">[signal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// block调用时刻：每当有信号发出数据，就会调用block.</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"接收到数据:%@\"</span>,x);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>同时也支持使用宏来快速地生成信号</p>\n<figure class=\"highlight objectivec\"><figcaption><span>KVO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[RACObserve(<span class=\"keyword\">self</span>, searchText) subscribeNext:^(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, text);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p><code>RACObserve</code>通过<code>- (RACSignal *)rac_valuesForKeyPath: observer:</code>来生成了一个信号，<br>其使用了KVO来监听property的变化，只要searchText被自己或外部改变，block就会被执行。只要是支持KVO的property都可以被RACObserve来生成一个信号。</p>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p>信号的处理是非常方便的，可以被修改(map)，也可以被过滤（filter），还可以被节流(throttle,一段时间内不在发送新的信号)等等。</p>\n<figure class=\"highlight objectivec\"><figcaption><span>Operators</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[RACObserve(<span class=\"keyword\">self</span>, searchText)</span><br><span class=\"line\">   filter:^<span class=\"built_in\">BOOL</span>(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">  throttle:<span class=\"number\">0.5</span>]</span><br><span class=\"line\"> subscribeNext:^(<span class=\"built_in\">NSString</span> *searchText) &#123;</span><br><span class=\"line\">   [<span class=\"keyword\">self</span> search:searchText];</span><br><span class=\"line\"> &#125;];</span><br></pre></td></tr></table></figure>\n<p>以上的代码通过对原始信号的处理（filter,throttle），生成了一下新的信号，过滤了输入字符长度小于等于2，同时在一定500毫秒内，不接收任何信号内容，过了500毫秒才获取最后发送的信号内容发出。</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>当然由于block的循环引用，我们必须像往常一样使用weakSelf，strongSelf。RAC在RACEXTScope.h中定义了 <code>@weakify()</code> 和 <code>@strongify()</code> 来方便我们使用。<code>@weakify()</code>实际上定义了一个_weak的<code>self_weak_</code> 变量\u0010，而<code>@strongify()</code>则在block定义了一个指向<code>self_weak_</code>的_strong的self指针。最终代码：</p>\n<figure class=\"highlight objectivec\"><figcaption><span>Final Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[[[RACObserve(<span class=\"keyword\">self</span>, searchText)</span><br><span class=\"line\">   filter:^<span class=\"built_in\">BOOL</span>(<span class=\"built_in\">NSString</span> *text) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">  throttle:<span class=\"number\">0.5</span>]</span><br><span class=\"line\"> subscribeNext:^(<span class=\"built_in\">NSString</span> *searchText) &#123;</span><br><span class=\"line\">   @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">   [<span class=\"keyword\">self</span> search:searchText];</span><br><span class=\"line\"> &#125;]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Written by 饿了么iOS组 － <a href=\"https://github.com/zhungxd\">zhungxd</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cioe3dez10000o2srd4xxeut1","category_id":"cioe3dezd0002o2srggbriq2o","_id":"cioe3dezh0004o2srd5mn4r3o"}],"PostTag":[{"post_id":"cioe3dez10000o2srd4xxeut1","tag_id":"cioe3deza0001o2src48pwa1m","_id":"cioe3dezi0005o2srejg82ws4"},{"post_id":"cioe3dez10000o2srd4xxeut1","tag_id":"cioe3dezf0003o2srq88zdotq","_id":"cioe3dezi0006o2srobgtemar"}],"Tag":[{"name":"iOS","_id":"cioe3deza0001o2src48pwa1m"},{"name":"ReactiveCocoa","_id":"cioe3dezf0003o2srq88zdotq"}]}}